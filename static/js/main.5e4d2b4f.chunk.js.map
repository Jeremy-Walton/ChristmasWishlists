{"version":3,"sources":["firebase.js","components/Wishlist.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","base","Rebase","createClass","database","Wishlist","props","updateTerm","event","setState","term","target","value","addItem","preventDefault","list","state","prevState","items","id","Date","getTime","newItem","list_id","text","removeItem","newItems","window","confirm","localStorageRef","localStorage","getItem","data","JSON","parse","this","ref","syncState","context","setItem","stringify","removeBinding","removeList","string","startChar","endChar","substring","lastIndexOf","filteredItems","Object","keys","forEach","key","item","map","index","renderItem","className","startsWith","endsWith","renderLink","onClick","bind","label","stringBetween","url","href","renderItems","onSubmit","placeholder","onChange","type","React","Component","App","lists","addList","newList","newLists","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e4d2b4f.chunk.js","sourcesContent":["import Rebase from \"re-base\";\nimport firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyAP9f2_UiLvxBV-Gehe7ymphvWW6Q5w518\",\n  authDomain: \"christmas-wishlists.firebaseapp.com\",\n  databaseURL: \"https://christmas-wishlists.firebaseio.com\",\n  projectId: \"christmas-wishlists\",\n  storageBucket: \"christmas-wishlists.appspot.com\",\n  messagingSenderId: \"692666356872\",\n  appId: \"1:692666356872:web:4b863c40a4b77ac9b97b3d\",\n  measurementId: \"G-F80YRR2RBJ\"\n});\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n// This is a named export\nexport { firebaseApp };\n\n// this is a default export\nexport default base;\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport base from \"../firebase\";\n\nexport default class Wishlist extends React.Component {\n  static propTypes = {\n    removeList: PropTypes.func.isRequired,\n    list: PropTypes.object.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    const localStorageRef = localStorage.getItem('christmas-wishlists-items');\n    const data = localStorageRef ? JSON.parse(localStorageRef) : { items: {} };\n\n    this.state = {\n      term: '',\n      items: data.items\n    };\n  }\n\n  componentDidMount() {\n    this.ref = base.syncState('/items', {\n      context: this,\n      state: 'items'\n    });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(\n      'christmas-wishlists-items',\n      JSON.stringify(this.state)\n    );\n  }\n\n  componentWillUnmount() {\n    base.removeBinding(this.ref);\n  }\n\n  removeList() {\n    const { list, removeList } = this.props;\n    const result = window.confirm(`Are you sure you want to delete ${list.term}`);\n    if (result) {\n      removeList(list.id)\n    }\n  }\n\n  updateTerm = event => {\n    this.setState({ term: event.target.value });\n  }\n\n  addItem = event => {\n    event.preventDefault()\n\n    const { list } = this.props;\n\n    if (this.state.term) {\n      this.setState(prevState => {\n        const { items, term } = prevState\n        const id = new Date().getTime();\n        const newItem = { id, list_id: list.id, text: term };\n\n        return { term: '', items: { ...items, [id]: newItem } };\n      });\n    }\n  }\n\n  removeItem = id => {\n    let { ...newItems } = this.state.items;\n    const result = window.confirm(`Are you sure you want to delete ${newItems[id].text}`);\n    if (result) {\n      newItems[id] = null;\n      this.setState({ items: newItems });\n    }\n  }\n\n  stringBetween(string, startChar, endChar) {\n    return string.substring(\n      string.lastIndexOf(startChar) + 1,\n      string.lastIndexOf(endChar)\n    )\n  }\n\n  renderItems() {\n    const { items } = this.state;\n    const { list } = this.props;\n\n    const filteredItems = {}\n    Object.keys(items).forEach(key => {\n      const item = items[key];\n      if (item.list_id === list.id) {\n        filteredItems[item.id] = item;\n      }\n    })\n\n    return Object.keys(filteredItems).map((id, index) => {\n      return this.renderItem({ id, text: items[id].text }, index)\n    })\n  }\n\n  renderItem(item, index) {\n    const { text, id } = item;\n\n    return (\n      <div key={index} className=\"item\">\n        {\n          text.startsWith('[') && text.endsWith(')') ? this.renderLink(text) : (<div className=\"item__text\">{text}</div>)\n        }\n        <div className=\"item__close\" onClick={this.removeItem.bind(this, id)}>X</div>\n      </div>\n    );\n  }\n\n  renderLink(text) {\n    const label = this.stringBetween(text, '[', ']');\n    const url = this.stringBetween(text, '(', ')');\n\n    return <a href={url} className=\"item__text\">{label}</a>\n  }\n\n  render() {\n    const { term } = this.state;\n    const { list } = this.props;\n\n    return (\n      <div className='wishlist'>\n        <div className=\"wishlist__header\">\n          <h1 className='mt-0'>{list.term}</h1>\n          <h1 className='wishlist__close' onClick={this.removeList.bind(this)}>X</h1>\n        </div>\n        <div className=\"item-container\">\n          {this.renderItems()}\n        </div>\n        <form className=\"add-form\" onSubmit={this.addItem}>\n          <input value={term} placeholder=\"Item\" onChange={this.updateTerm} />\n          <button type='submit' className=\"btn btn--primary\">Add</button>\n        </form>\n      </div>\n    );\n  }\n};\n","import React from 'react';\nimport base from \"./firebase\";\n\nimport './assets/css/App.css';\n\nimport Wishlist from  './components/Wishlist';\n\nexport default class App extends React.Component {\n  state = {\n    term: '',\n    lists: {}\n  };\n\n  constructor() {\n    super()\n\n    const localStorageRef = localStorage.getItem('christmas-wishlists');\n    const data = localStorageRef ? JSON.parse(localStorageRef) : { lists: {} };\n\n    this.state = {\n      term: '',\n      lists: data.lists\n    };\n  }\n\n\n  componentDidMount() {\n    this.ref = base.syncState('/lists', {\n      context: this,\n      state: 'lists'\n    });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(\n      'christmas-wishlists',\n      JSON.stringify(this.state)\n    );\n  }\n\n  componentWillUnmount() {\n    base.removeBinding(this.ref);\n  }\n\n  updateTerm = event => {\n    this.setState({ term: event.target.value });\n  }\n\n  addList = event => {\n    event.preventDefault()\n\n    if (this.state.term) {\n      this.setState(prevState => {\n        const { lists, term } = prevState\n        const id = new Date().getTime();\n        const newList = {\n          id,\n          term,\n          items: []\n        };\n\n        return { term: '', lists: { ...lists, [id]: newList } };\n      });\n    }\n  }\n\n  removeList = id => {\n    let { ...newLists } = this.state.lists;\n    newLists[id] = null;\n    // TODO: remove items that are associated\n    this.setState({ lists: newLists });\n  }\n\n  render() {\n    const { term, lists } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <div>Christmas Wishlists</div>\n          <a href='https://www.launchtabs.com/' className='home-link'>Other Cool Stuff</a>\n        </header>\n\n        <div className=\"container\">\n          <div className=\"wishlist-container\">\n            {Object.keys(lists).map((id, index) => <Wishlist key={index} removeList={this.removeList} list={lists[id]} />) }\n          </div>\n        </div>\n        <form className=\"add-form add-list\" onSubmit={this.addList}>\n          <input value={term} placeholder=\"List name\" onChange={this.updateTerm} />\n          <button type='submit' className=\"btn btn--primary\">Add New List</button>\n        </form>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}