{"version":3,"sources":["firebase.js","models/List.js","components/Wishlist.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","base","Rebase","createClass","database","List","data","this","id","term","items","Wishlist","list","props","className","React","Component","App","state","lists","updateTerm","event","setState","target","value","addList","preventDefault","Date","getTime","newList","localStorageRef","localStorage","getItem","JSON","parse","ref","syncState","context","setItem","stringify","removeBinding","href","Object","keys","map","index","key","onSubmit","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAGMA,E,OAAcC,EAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBASFC,EANFC,IAAOC,YAAYb,EAAYc,YCdvBC,G,MACnB,WAAYC,GAAO,oBACjBC,KAAKC,GAAKF,EAAKE,GACfD,KAAKE,KAAOH,EAAKG,KACjBF,KAAKG,MAAQJ,EAAKI,QCDDC,E,iLAKT,IACAC,EAASL,KAAKM,MAAdD,KAER,OACE,yBAAKE,UAAU,YAAYF,EAAKH,U,GATAM,IAAMC,W,6jBCMvBC,E,2MACnBC,MAAQ,CACNT,KAAM,GACNU,MAAO,I,EAiCTC,WAAa,SAACC,GACZ,EAAKC,SAAS,CAAEb,KAAMY,EAAME,OAAOC,S,EAGrCC,QAAU,SAACJ,GACTA,EAAMK,iBADa,MAMK,EAAKR,MAArBC,EANW,EAMXA,MAAOV,EANI,EAMJA,KACTD,GAAK,IAAImB,MAAOC,UAChBC,EAAU,IAAIxB,EAAK,CAAEG,KAAIC,OAAMC,MAAO,KAE5C,EAAKY,SAAS,CACZb,KAAM,GACNU,MAAM,EAAD,GAAOA,EAAP,eAAeX,EAAKqB,O,mFA5C3B,IAAMC,EAAkBC,aAAaC,QAAQ,uBAC7C,GAAIF,EAAiB,CACnB,IAAMxB,EAAO2B,KAAKC,MAAMJ,GAKxBvB,KAAKe,SAAS,CAAEb,KAAM,GAAIU,MAAOb,EAAKa,QAIxCZ,KAAK4B,IAAMlC,EAAKmC,UAAU,IAAK,CAC7BC,QAAS9B,KACTW,MAAO,Y,2CAKTa,aAAaO,QACX,sBACAL,KAAKM,UAAUhC,KAAKW,U,6CAKtBjB,EAAKuC,cAAcjC,KAAK4B,O,+BAuBhB,IAAD,EACiB5B,KAAKW,MAArBT,EADD,EACCA,KAAMU,EADP,EACOA,MAEd,OACE,yBAAKL,UAAU,OACb,gCACE,oDACA,uBAAG2B,KAAK,8BAA8B3B,UAAU,aAAhD,qBAEF,yBAAKA,UAAU,eAEf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,sBACX4B,OAAOC,KAAKxB,GAAOyB,KAAI,SAACpC,EAAIqC,GAAL,OAAe,kBAAC,EAAD,CAAUC,IAAKD,EAAOjC,KAAMO,EAAMX,SAG5E,0BAAMM,UAAU,WAAWiC,SAAUxC,KAAKkB,SACxC,2BAAOjB,GAAG,WAAWgB,MAAOf,EAAMuC,YAAY,YAAYC,SAAU1C,KAAKa,aACzE,4BAAQN,UAAU,oBAAlB,uB,GA1EqBC,IAAMC,WCGnBkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e536ef64.chunk.js","sourcesContent":["import Rebase from \"re-base\";\nimport firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyAP9f2_UiLvxBV-Gehe7ymphvWW6Q5w518\",\n  authDomain: \"christmas-wishlists.firebaseapp.com\",\n  databaseURL: \"https://christmas-wishlists.firebaseio.com\",\n  projectId: \"christmas-wishlists\",\n  storageBucket: \"christmas-wishlists.appspot.com\",\n  messagingSenderId: \"692666356872\",\n  appId: \"1:692666356872:web:4b863c40a4b77ac9b97b3d\",\n  measurementId: \"G-F80YRR2RBJ\"\n});\n\nconst base = Rebase.createClass(firebaseApp.database());\n\n// This is a named export\nexport { firebaseApp };\n\n// this is a default export\nexport default base;\n","export default class List {\n  constructor(data) {\n    this.id = data.id; // integer\n    this.term = data.term; // String\n    this.items = data.items; // Array\n  }\n}\n","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nexport default class Wishlist extends React.Component {\n  static propTypes = {\n    list: PropTypes.object.isRequired\n  };\n\n  render() {\n    const { list } = this.props;\n\n    return (\n      <div className='wishlist'>{list.term}</div>\n    );\n  }\n};\n","import React from 'react';\nimport base from \"./firebase\";\n\nimport './assets/css/App.css';\n\nimport List from  './models/List';\n\nimport Wishlist from  './components/Wishlist';\n\nexport default class App extends React.Component {\n  state = {\n    term: '',\n    lists: {}\n  };\n\n  componentDidMount() {\n    // first reinstate our localStorage\n    const localStorageRef = localStorage.getItem('christmas-wishlists');\n    if (localStorageRef) {\n      const data = JSON.parse(localStorageRef);\n\n      // TODO: rehidrate items\n      // let lists = data.lists.map(list => new List(list));\n\n      this.setState({ term: '', lists: data.lists });\n    }\n\n    // next sync with database\n    this.ref = base.syncState('/', {\n      context: this,\n      state: \"lists\"\n    });\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(\n      'christmas-wishlists',\n      JSON.stringify(this.state)\n    );\n  }\n\n  componentWillUnmount() {\n    base.removeBinding(this.ref);\n  }\n\n  updateTerm = (event) => {\n    this.setState({ term: event.target.value });\n  }\n\n  addList = (event) => {\n    event.preventDefault()\n\n    // TODO: get term from form rather than state\n    // TODO: ignore blank input\n\n    const { lists, term } = this.state\n    const id = new Date().getTime();\n    const newList = new List({ id, term, items: [] })\n\n    this.setState({\n      term: '',\n      lists: { ...lists, [id]: newList }\n    });\n  }\n\n  render() {\n    const { term, lists } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <div>Christmas Wishlists</div>\n          <a href='https://www.launchtabs.com/' className='home-link'>Other Cool Stuff</a>\n        </header>\n        <div className='header-fix'></div>\n\n        <div className=\"container\">\n          <div className=\"wishlist-container\">\n            { Object.keys(lists).map((id, index) => <Wishlist key={index} list={lists[id]} />) }\n          </div>\n\n          <form className=\"add-list\" onSubmit={this.addList}>\n            <input id=\"add-list\" value={term} placeholder=\"List name\" onChange={this.updateTerm} />\n            <button className=\"btn btn--primary\">Add New List</button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}